{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "simulation = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.45\n"
     ]
    }
   ],
   "source": [
    "f = np.random.normal(0, 1, simulation)\n",
    "\n",
    "x = 1\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.hist(f, density=True)\n",
    "plt.axvline(x, color = 'r')\n",
    "plt.show()\n",
    "\n",
    "print(np.logical_and(-x < f, f < x).sum() / simulation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
